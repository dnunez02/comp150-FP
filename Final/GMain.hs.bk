module Main
where

import Genetic
import Rewrite
import System.Time
import System.FilePath.Posix
import Control.Applicative
import System.CPUTime

main :: IO ()
main = do 
          ----program <- readFile filePath
          ----def <- return $ createDNA moduleName program
          def <- createGeneFromFile filePath
          compile $ path $ head $ getDNA def
          --start <- getCPUTime
          --fitness $ def
          --end <- getCPUTime
          --time <- return $ end - start
          --timesList <- sequence $ (take fitnessRuns $ repeat fitness) <*> [def]
          timesList <- fitnessDNA' fitnessRuns (fromInteger . toInteger $ (maxBound :: Int)) $ head $ getDNA def
          !time <- return $ avg timesList
          print time
          ---dnas <- return $ buildGeneration [def]
          --dnas <- return $ massMutate def numMutations
          --sequence $ map (compile . path) dnas -- Compile all the programs
          --times <- sequence $ map (fitnessWithTimeout $ (timeToInt time) + epsilon ) dnas
          --records <- return $ sort $ map (uncurry createDNARecords) $ zip dnas times
          ---records <- runGeneration dnas (timeToInt time) 6
          dnas <- geneticAlgG' [def] runs time fitnessRuns poolSize ((GR def time), 0)
          --print $ (fst . splitFileName . path . head . getDNA $ head dnas) ++ " vec: " ++ (show $ (map vec $ getDNA $ head dnas))
          print $ getDNA $ head dnas
        where
           --bits = 33 :: Integer
           --moduleName = "Main"
           filePath = "files.txt"
           --numMutations = 10
           runs = 10
           fitnessRuns = 10
           poolSize = 6
